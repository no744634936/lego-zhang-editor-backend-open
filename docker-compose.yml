version: '3'
services:
    editor-server:    #service name
        build:
            context: .
            dockerfile: Dockerfile
        image: editor-server    # 跟.github/worksflows/deploy.yml 中的命令 docker-compose build editor-server  使用同一个image 名
        container_name: editor-server
        ports:
            - 8081:3000
    editor-redis:
        image: redis
        container_name: editor-redis
        ports:
            - 6378:6379
        environment:
            - TZ=Asia/Tokyo
    editor-mysql:
        image: mysql # 引用官网 mysql 镜像
        container_name: editor-mysql
        restart: always # 出错则重启
        privileged: true # 高权限，执行下面的 mysql/init
        command: --default-authentication-plugin=mysql_native_password # 为了远程访问而做的
        ports:
            - 3305:3306 # 宿主机可以用 127.0.0.1:3305 即可连接容器中的数据库，和 redis 一样
        volumes:
            - .docker-volumes/mysql/log:/var/log/mysql  # 记录日志
            - .docker-volumes/mysql/data:/var/lib/mysql # 数据持久化
            - ./mysql/init:/docker-entrypoint-initdb.d/ # 初始化 sql，运行mysql/init里的init.sql文件
        environment:
            - MYSQL_DATABASE=imooc_lego_course # 初始化容器时创建数据库
            - MYSQL_ROOT_PASSWORD=xxxxxxxxxx #设置密码
            - TZ=Asia/Tokyo # 设置时区
    editor-mongo:
        image: mongo # 引用官网 mongo 镜像
        container_name: editor-mongo
        restart: always
        volumes:
            - '.docker-volumes/mongo/data:/data/db' # 数据持久化,container里的mongo数据库的数据，存储在当前项目的的.docker-volume文件夹里
        environment:
            - MONGO_INITDB_DATABASE=imooc_lego_course #初始化一个数据库
            - TZ=Asia/Tokyo # 设置时区
        ports:
            - '27016:27017' # 宿主机可以用 127.0.0.1:27016 即可连接容器中的mongo数据库